@implements IDisposable
@inject FeedService FeedService
@inject IJSRuntime JsRuntime
@inject LocalUser LocalUser

<MainLayout>
    <div class="authorized-user-page">
        <div class="left-panel">
            <div class="section">
                <div class="header">
                    <div class="name">Feeds</div>
                    <div class="toolbar">
                        <div class="icon" title="add new feed" @onclick="AddNewFeed">
                            <!-- comes from open-iconic: plus -->
                            <svg xmlns="http://www.w3.org/2000/svg" width="8" height="8" viewBox="0 0 8 8">
                                <path d="M3 0v3h-3v2h3v3h2v-3h3v-2h-3v-3h-2z" />
                            </svg>
                        </div>
                    </div>
                </div>
                <div class="feed-group-list">
                    <div class="group">
                        <div class="header show-stars" @onclick="ShowStars">
                            <div class="icon">
                                <!-- comes from open-iconic: star -->
                                <svg xmlns="http://www.w3.org/2000/svg" width="8" height="8" viewBox="0 0 8 8">
                                    <path d="M4 0l-1 3h-3l2.5 2-1 3 2.5-2 2.5 2-1-3 2.5-2h-3l-1-3z" />
                                </svg>
                            </div>
                            <div class="feed @(IsShowStarsActive ? "active" : "")">
                                <div class="name"><span>Stars</span></div>
                            </div>
                        </div>
                    </div>
                    @foreach (var group in LocalUser.Feeds.GroupBy(f => f.Group))
                    {
                        <div class="group">
                            <div class="header">
                                <div class="icon">
                                    <!-- comes from open-iconic: book -->
                                    <svg xmlns="http://www.w3.org/2000/svg" width="8" height="8" viewBox="0 0 8 8">
                                        <path d="M1 0c-.07 0-.13.01-.19.03-.39.08-.7.39-.78.78-.03.06-.03.12-.03.19v5.5c0 .83.67 1.5 1.5 1.5h5.5v-1h-5.5c-.28 0-.5-.22-.5-.5s.22-.5.5-.5h5.5v-5.5c0-.28-.22-.5-.5-.5h-.5v3l-1-1-1 1v-3h-3z" />
                                    </svg>
                                </div>
                                <div class="name" title="@group.Key"><span>@group.Key</span></div>
                            </div>
                            <div class="feed-list">
                                @foreach (var feed in group)
                                {
                                    <div class="feed @(feed.IsActive ? "active" : "")" @onclick="() => ShowFeed(feed)">
                                        <FallbackImage Src="@feed.IconUri" FallbackSrc="@($"https://www.google.com/s2/favicons?domain={new Uri(feed.Uri).Host}")"/>
                                        <div class="name" title="@(string.IsNullOrWhiteSpace(feed.Name) ? feed.Uri : feed.Name)"><span>@(string.IsNullOrWhiteSpace(feed.Name) ? feed.Uri : feed.Name)</span></div>
                                        <div class="unreaded-items-count">@feed.Items.Count(i => !i.IsReaded).ToStringEmptyIfZero()</div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="right-panel">
            @RightPanelContent
        </div>
        <div id="803822386" class="ad"/>
    </div>
</MainLayout>

@code
{
    private RenderFragment RightPanelContent { get; set; }

    private bool IsShowStarsActive { get; set; }

    protected override void OnInitialized()
    {
        FeedService.RefreshRequested += OnRefreshRequested;
        _ = JsRuntime.InvokeVoidAsync("showAd");
        ShowFeed();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _ = JsRuntime.InvokeVoidAsync("showAd");
        }
    }

    public void Dispose()
    {
        FeedService.RefreshRequested -= OnRefreshRequested;
    }

    private void AddNewFeed()
    {
        RightPanelContent = @<AddNewFeed OnCancel="Cancel" OnSave="SaveNewFeed"/>;
    }

    private void SaveNewFeed(Feed feed)
    {
        // Display the feed.
        ShowFeed(feed);

        // Subscribe the feed.
        _ = LocalUser.SubscribeFeedAsync(feed);
    }

    private void ShowFeed(Feed feed = null)
    {
        IsShowStarsActive = false;
        LocalUser.Feeds.ForEach(f => f.IsActive = false);
        feed = feed ?? LocalUser.Feeds.FirstOrDefault();
        if (feed != null)
        {
            feed.IsActive = true;

            RightPanelContent = @<ShowFeed Feed=@feed OnUnsubscribe="Unsubscribe"/>;

            // Refresh the feed.
            _ = FeedService.RefreshFeedAsync(feed);
        }
        else
        {
            AddNewFeed();
        }
    }

    private async Task ShowStars()
    {
        IsShowStarsActive = true;
        
        LocalUser.Feeds.ForEach(f => f.IsActive = false);

        RightPanelContent = @<WaitingPage Text="Loading..."/>;

        var staredFeedItems = await LocalUser.GetStaredFeedItems();
        RightPanelContent = @<ShowStaredFeedItems StaredFeedItems="@staredFeedItems"/>;
    }

    private void Cancel()
    {
        RightPanelContent = @<div></div>;
    }

    private void Unsubscribe(Feed feed)
    {
        _ = LocalUser.UnsubscribeFeedAsync(feed);
        ShowFeed();
    }

    private void OnRefreshRequested()
    {
        StateHasChanged();
    }
}
