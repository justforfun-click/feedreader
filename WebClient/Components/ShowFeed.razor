@inject FeedService FeedService
@inject IJSRuntime JsRuntime

<div class="show-feed">
    <div class="feed-description">
        <div class="icon">
            <FallbackImage Src="@Feed.IconUri" FallbackSrc="@($"https://www.google.com/s2/favicons?domain={new Uri(Feed.Uri).Host}")"/>
        </div>
        <div class="name-and-description">
            <a class="name" href="@WebsiteLink" title="@Name" target="_blank"><span>@Name</span></a>
            <a class="description" href="@Uri" target="_blank" title="@Description"><span>@Description</span></a>
        </div>
        <div class="toolbar">
            <DropdownButton Text="Mark all as read">
                <MenuContent>
                    <li @onclick="Unsubscribe">Unsubscribe</li>
                </MenuContent>
            </DropdownButton>
        </div>
    </div>
    <div class="feed-items">
        @if (!string.IsNullOrWhiteSpace(Feed.Error))
        {
            <div class="error">Error: @Feed.Error</div>
        }
        else if (Feed.Items.Count == 0)
        {
            <WaitingPage Text="Loading..."/>
        }
        else
        {
            foreach (var item in Feed.Items)
            {
                <FeedItemThumbnail FeedItem=@item></FeedItemThumbnail>
            }

            @if (!string.IsNullOrWhiteSpace(Feed.NextRowKey))
            {
                <div class="feed-item-thumbnail-without-topic-picture more" @onclick="More"><div class="title">Loading more ...</div></div>
            }
        }
    </div>
</div>

@code
{
    [Parameter]
    public Feed Feed { get; set; }

    [Parameter]
    public EventCallback<Feed> OnUnsubscribe { get; set; }

    private string Name
    {
        get
        {
            return string.IsNullOrWhiteSpace(Feed.Name) ? Uri : Feed.Name;
        }
    }

    private string WebsiteLink
    {
        get
        {
            return string.IsNullOrWhiteSpace(Feed.WebsiteLink) ? Name : Feed.WebsiteLink;
        }
    }

    private string Uri
    {
        get
        {
            return string.IsNullOrWhiteSpace(Feed.OriginalUri) ? Feed.Uri : Feed.OriginalUri;
        }
    }

    private string Description
    {
        get
        {
            return string.IsNullOrWhiteSpace(Feed.Description) ? Uri : Feed.Description;
        }
    }

    private Task Unsubscribe()
    {
        return OnUnsubscribe.InvokeAsync(Feed);
    }

    private void MarkAllReaded()
    {
        FeedService.MarkFeedAllItemsAsReadedAsync(Feed);
    }

    private Task More()
    {
        return FeedService.RefreshFeedAsync(Feed, true);
    }
}
