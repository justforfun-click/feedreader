<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
    xmlns:admin="http://webns.net/mvcb/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:content="http://purl.org/rss/1.0/modules/content/">

    <channel>
    
    <title><![CDATA[Standard C++]]></title>
    <link>http://isocpp.org/blog</link>
    <description></description>
    <dc:language>en</dc:language>
    <dc:rights>Copyright 2020</dc:rights>
    <admin:generatorAgent rdf:resource="https://expressionengine.com/" />
    

    <item>
      <title>CppCon 2019: There Are No Zero&#45;cost Abstractions&#45;&#45;Chandler Carruth</title>
      <link>https://isocpp.org//blog/2020/07/cppcon-2019-there-are-no-zero-cost-abstractions-chandler-carruth</link>
      <guid>https://isocpp.org//blog/2020/07/cppcon-2019-there-are-no-zero-cost-abstractions-chandler-carruth</guid>
      <description><![CDATA[<p>
	<img alt="" src="https://i3.ytimg.com/vi/rHIkrotSwcc/maxresdefault.jpg" style="width: 500px; height: 281px; margin: 10px; float: right;" />This year, CppCon 2020 is <a href="https://cppcon.org/going-virtual/">going virtual</a>. The dates are still the same &ndash; September 14-18 &ndash; and we are aiming for the CppCon live event to have pretty much everything you&rsquo;re familiar with at CppCon except moved online: multiple tracks including &ldquo;back to basics&rdquo; and a new &ldquo;embedded&rdquo; track; live speaker Q&amp;A; live talk time zones friendly to Americas and EMEA (and we&rsquo;re going to try to arrange around-the-clock recorded repeats in all time zones, where speakers who are available can be available for live Q&amp;A in their repeated talks too, and we&rsquo;ll do that if it&rsquo;s possible &ndash; but we&rsquo;re still working on it!); virtual tables where you can interact face-to-face online with other attendees just like at the physical event; virtual exhibitor spaces where you can meet the folks on your favorite product&rsquo;s teams to ask them question face-to-face; pre- and post-conference classes; and even the CppCon house band playing live before every plenary session. All talk recordings will be freely available as usual on YouTube a month or two after the event, but everything else above will be available only live during CppCon week.</p>
<p>
	To whet your appetite for this year&rsquo;s conference, here&rsquo;s another of the top-rated talks from last year. Enjoy &ndash; <a href="https://cppcon.org/registration/">and register today for CppCon 2020</a> &ndash; all the spirit and flavor of CppCon, this year all virtual and online!</p>
<blockquote>
	<h3>
		<a href="https://www.youtube.com/watch?v=rHIkrotSwcc">There Are No Zero-cost Abstractions</a></h3>
	<p>
		by&nbsp;Chandler Carruth</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		C++ is often described as providing zero-cost abstractions. Libraries offer up facilities documented as such. And of course, users read all of these advertisements and believe that the abstractions they are using are truly zero-cost.</p>
	<p>
		Sadly, there is no truth in advertising here, and there are no zero-cost abstractions.</p>
	<p>
		This talk will dive into what we mean by "zero-cost abstractions", and explain why it is at best misleading and at worst completely wrong to describe libraries this way. It will show case studies of where this has led to significant problems in practice as libraries are designed or used in unscalable and unsustainable ways. Finally, it will suggest a different framing and approach for discussing abstraction costs in modern C++ software.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand, Events,]]></dc:subject>
      <pubDate>Thu, 30 Jul 2020 03:01:43 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>CppCon 2019: Converting to C++20 Modules&#45;Nathan Sidwell</title>
      <link>https://isocpp.org//blog/2020/07/cppcon-2019-Converting-to-C-20-Modules-Nathan-Sidwell</link>
      <guid>https://isocpp.org//blog/2020/07/cppcon-2019-Converting-to-C-20-Modules-Nathan-Sidwell</guid>
      <description><![CDATA[<p>
	<img alt="" src="https://i3.ytimg.com/vi/KVsWIEw3TTw/maxresdefault.jpg" style="width: 500px; height: 281px; margin: 10px; float: right;" />This year, CppCon 2020 is <a href="https://cppcon.org/going-virtual/">going virtual</a>. The dates are still the same &ndash; September 14-18 &ndash; and we are aiming for the CppCon live event to have pretty much everything you&rsquo;re familiar with at CppCon except moved online: multiple tracks including &ldquo;back to basics&rdquo; and a new &ldquo;embedded&rdquo; track; live speaker Q&amp;A; live talk time zones friendly to Americas and EMEA (and we&rsquo;re going to try to arrange around-the-clock recorded repeats in all time zones, where speakers who are available can be available for live Q&amp;A in their repeated talks too, and we&rsquo;ll do that if it&rsquo;s possible &ndash; but we&rsquo;re still working on it!); virtual tables where you can interact face-to-face online with other attendees just like at the physical event; virtual exhibitor spaces where you can meet the folks on your favorite product&rsquo;s teams to ask them question face-to-face; pre- and post-conference classes; and even the CppCon house band playing live before every plenary session. All talk recordings will be freely available as usual on YouTube a month or two after the event, but everything else above will be available only live during CppCon week.</p>
<p>
	To whet your appetite for this year&rsquo;s conference, here&rsquo;s another of the top-rated talks from last year. Enjoy &ndash; <a href="https://cppcon.org/registration/">and register today for CppCon 2020</a> &ndash; all the spirit and flavor of CppCon, this year all virtual and online!</p>
<blockquote>
	<h3>
		<a href="https://www.youtube.com/watch?v=KVsWIEw3TTw">Converting to C++20 Modules</a></h3>
	<p>
		by&nbsp;Nathan Sidwell</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		C++20 will have a module system, which provides benefits beyond simple code hygiene. C++20 modules uses new keywords and explicit source-level annotations. How do we get there from here?</p>
	<p>
		I have been implementing this in the GNU compiler, and will talk about the broad strokes of the module specification.<br />
		I will describe how:<br />
		* one may incrementally convert source code,<br />
		* build systems might be augmented,</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand, Events,]]></dc:subject>
      <pubDate>Tue, 28 Jul 2020 03:01:47 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>2020&#45;07 mailing available</title>
      <link>https://isocpp.org//blog/2020/07/2020-07-mailing-available</link>
      <guid>https://isocpp.org//blog/2020/07/2020-07-mailing-available</guid>
      <description><![CDATA[<p>
	The 2020-07 mailing of new standards papers is now available.</p>
<p>
	&nbsp;</p>
<table border="1" summary="See previous paragraph.">
	<thead>
		<tr>
			<th>
				WG21 Number</th>
			<th>
				Title</th>
			<th>
				Author</th>
			<th>
				Document Date</th>
			<th>
				Mailing Date</th>
			<th>
				Previous Version</th>
			<th>
				Subgroup</th>
			<!--            <th>Disposition</th> -->
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>
				<a href="https://wg21.link/P1068R4">P1068R4</a></td>
			<td>
				Vector API for random number generation</td>
			<td>
				Ilya Burylov</td>
			<td>
				2020-07-15</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P1068R3">P1068R3</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P1184R2">P1184R2</a></td>
			<td>
				A Module Mapper</td>
			<td>
				Nathan Sidwell</td>
			<td>
				2020-07-10</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P1184R1">P1184R1</a></td>
			<td>
				SG15 Tooling</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P1272R3">P1272R3</a></td>
			<td>
				Byteswapping for fun&amp;&amp;nuf</td>
			<td>
				Isabella Muerte</td>
			<td>
				2020-07-14</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P1272R2">P1272R2</a></td>
			<td>
				LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P1478R4">P1478R4</a></td>
			<td>
				Byte-wise atomic memcpy</td>
			<td>
				Hans Boehm</td>
			<td>
				2020-07-14</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P1478R3">P1478R3</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P1642R4">P1642R4</a></td>
			<td>
				Freestanding Library: Easy [utilities], [ranges], and [iterators]</td>
			<td>
				Ben Craig</td>
			<td>
				2020-07-12</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P1642R3">P1642R3</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P1659R1">P1659R1</a></td>
			<td>
				starts_with and ends_with</td>
			<td>
				Christopher Di Bella</td>
			<td>
				2020-07-15</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P1659R0">P1659R0</a></td>
			<td>
				LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P1679R3">P1679R3</a></td>
			<td>
				String Contains function</td>
			<td>
				Wim Leflere</td>
			<td>
				2020-07-21</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P1679R2">P1679R2</a></td>
			<td>
				LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P1726R4">P1726R4</a></td>
			<td>
				Pointer lifetime-end zap</td>
			<td>
				Paul E. McKenney</td>
			<td>
				2020-07-08</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P1726R3">P1726R3</a></td>
			<td>
				SG1 Concurrency and Parallelism,SG12 Undefined and Unspecified Behavior,EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P1864R0">P1864R0</a></td>
			<td>
				Defining Target Tuplets</td>
			<td>
				Isabella Muerte</td>
			<td>
				2020-07-11</td>
			<td>
				2020-07</td>
			<td>
				&nbsp;</td>
			<td>
				SG15 Tooling</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2000R2">P2000R2</a></td>
			<td>
				Direction for ISO C++</td>
			<td>
				Michael Wong</td>
			<td>
				2020-07-15</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P2000R1">P2000R1</a></td>
			<td>
				All of WG21,Direction Group</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2029R2">P2029R2</a></td>
			<td>
				Proposed resolution for core issues 411, 1656, and 2333; escapes in character and string literals</td>
			<td>
				Tom Honermann</td>
			<td>
				2020-07-14</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P2029R1">P2029R1</a></td>
			<td>
				CWG Core</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2075R1">P2075R1</a></td>
			<td>
				Philox as an extension of the C++ RNG engines</td>
			<td>
				Pavel Dyakov</td>
			<td>
				2020-07-15</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P2075R0">P2075R0</a></td>
			<td>
				SG6 Numerics,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2093R1">P2093R1</a></td>
			<td>
				Formatted output</td>
			<td>
				Victor Zverovich</td>
			<td>
				2020-07-18</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P2093R0">P2093R0</a></td>
			<td>
				SG16 Unicode,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2128R2">P2128R2</a></td>
			<td>
				Multidimensional subscript operator</td>
			<td>
				Corentin Jabot</td>
			<td>
				2020-07-12</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P2128R1">P2128R1</a></td>
			<td>
				EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2139R2">P2139R2</a></td>
			<td>
				Reviewing Deprecated Facilities of C++20 for C++23</td>
			<td>
				Alisdair Meredith</td>
			<td>
				2020-07-15</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P2139R1">P2139R1</a></td>
			<td>
				EWG Evolution,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2146R2">P2146R2</a></td>
			<td>
				Modern std::byte stream IO for C++</td>
			<td>
				Amanda Kornoushenko</td>
			<td>
				2020-07-21</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P2146R1">P2146R1</a></td>
			<td>
				LEWGI SG18: LEWG Incubator</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2156R1">P2156R1</a></td>
			<td>
				Allow Duplicate Attributes</td>
			<td>
				Erich Keane</td>
			<td>
				2020-07-02</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P2156R0">P2156R0</a></td>
			<td>
				EWG Evolution,CWG Core</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2161R2">P2161R2</a></td>
			<td>
				Remove Default Candidate Executor</td>
			<td>
				Robert Leahy</td>
			<td>
				2020-07-13</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P2161R1">P2161R1</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2165R1">P2165R1</a></td>
			<td>
				Compatibility between tuple and tuple-like objects</td>
			<td>
				Corentin Jabot</td>
			<td>
				2020-07-14</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P2165R0">P2165R0</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2169R1">P2169R1</a></td>
			<td>
				A Nice Placeholder With No Name</td>
			<td>
				Corentin Jabot</td>
			<td>
				2020-07-12</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P2169R0">P2169R0</a></td>
			<td>
				EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2178R1">P2178R1</a></td>
			<td>
				Misc lexing and string handling improvements</td>
			<td>
				Corentin Jabot</td>
			<td>
				2020-07-14</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P2178R0">P2178R0</a></td>
			<td>
				SG16 Unicode,EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2183R0">P2183R0</a></td>
			<td>
				Executors Review: Properties</td>
			<td>
				David Olsen</td>
			<td>
				2020-07-14</td>
			<td>
				2020-07</td>
			<td>
				&nbsp;</td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2186R0">P2186R0</a></td>
			<td>
				Removing Garbage Collection Support</td>
			<td>
				JF Bastien</td>
			<td>
				2020-07-12</td>
			<td>
				2020-07</td>
			<td>
				&nbsp;</td>
			<td>
				EWG Evolution,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2187R3">P2187R3</a></td>
			<td>
				std::swap_if, std::predictable</td>
			<td>
				Nathan Myers</td>
			<td>
				2020-07-14</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P2187R2">P2187R2</a></td>
			<td>
				LEWGI SG18: LEWG Incubator,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2188R1">P2188R1</a></td>
			<td>
				Zap the Zap: Pointers are sometimes just bags of bits</td>
			<td>
				Anthony Williams</td>
			<td>
				2020-07-15</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P2188R0">P2188R0</a></td>
			<td>
				EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2191R0">P2191R0</a></td>
			<td>
				Modules: ADL &amp; GMFs do not play together well (anymore)</td>
			<td>
				Nathan Sidwell</td>
			<td>
				2020-07-10</td>
			<td>
				2020-07</td>
			<td>
				&nbsp;</td>
			<td>
				EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2192R0">P2192R0</a></td>
			<td>
				std::valstat - function return type</td>
			<td>
				Dusan B. Jovanovic</td>
			<td>
				2020-07-13</td>
			<td>
				2020-07</td>
			<td>
				&nbsp;</td>
			<td>
				LEWGI SG18: LEWG Incubator</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2193R0">P2193R0</a></td>
			<td>
				How to structure a teaching topic</td>
			<td>
				JC van WInkel</td>
			<td>
				2020-06-26</td>
			<td>
				2020-07</td>
			<td>
				&nbsp;</td>
			<td>
				SG20 Education</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2193R1">P2193R1</a></td>
			<td>
				How to structure a teaching topic</td>
			<td>
				JC van WInkel</td>
			<td>
				2020-07-02</td>
			<td>
				2020-07</td>
			<td>
				<a href="https://wg21.link/P2193R0">P2193R0</a></td>
			<td>
				SG20 Education</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2196R0">P2196R0</a></td>
			<td>
				A lifetime-extending forwarder</td>
			<td>
				Vincent Reverdy</td>
			<td>
				2020-07-15</td>
			<td>
				2020-07</td>
			<td>
				&nbsp;</td>
			<td>
				LEWGI SG18: LEWG Incubator</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2198R0">P2198R0</a></td>
			<td>
				Freestanding Feature-Test Macros and Implementation-Defined Extensions</td>
			<td>
				Ben Craig</td>
			<td>
				2020-07-12</td>
			<td>
				2020-07</td>
			<td>
				&nbsp;</td>
			<td>
				SG10 Feature Test</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2199R0">P2199R0</a></td>
			<td>
				Concepts to differentiate types</td>
			<td>
				Isabella Muerte</td>
			<td>
				2020-07-11</td>
			<td>
				2020-07</td>
			<td>
				&nbsp;</td>
			<td>
				LEWGI SG18: LEWG Incubator,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2201R0">P2201R0</a></td>
			<td>
				Mixed string literal concatenation</td>
			<td>
				Jens Maurer</td>
			<td>
				2020-07-14</td>
			<td>
				2020-07</td>
			<td>
				&nbsp;</td>
			<td>
				SG16 Unicode</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2202R0">P2202R0</a></td>
			<td>
				Senders/Receivers group Executors review report</td>
			<td>
				Ga&scaron;per A&#382;man</td>
			<td>
				2020-07-15</td>
			<td>
				2020-07</td>
			<td>
				&nbsp;</td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2203R0">P2203R0</a></td>
			<td>
				LEWG Executors Customization Point Report</td>
			<td>
				Ryan McDougall, Tomasz Kami&#324;ski</td>
			<td>
				2020-07-15</td>
			<td>
				2020-07</td>
			<td>
				&nbsp;</td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
	</tbody>
</table>]]></description>
      <dc:subject><![CDATA[News, Standardization,]]></dc:subject>
      <pubDate>Mon, 27 Jul 2020 17:32:59 +0000</pubDate>
      <dc:creator>Administrator</dc:creator>
    </item>

    <item>
      <title>DeepEnds 3.5: Make public members private</title>
      <link>https://isocpp.org//blog/2020/07/make-public-members-private</link>
      <guid>https://isocpp.org//blog/2020/07/make-public-members-private</guid>
      <description><![CDATA[<p>
	<img alt="workflow.png" src="https://isocpp.org/files/img/workflow.png" style="width: 400px; margin: 10px; float: right;" />CycleRouter Ltd has released version 3.5 of their DeepEnds dependency analysis tool. A highlight:</p>
<blockquote>
	<h3>
		<a href="https://www.deepends.co.uk/workflows/makeprivate.html">Report and/or automatically rewrite public members that should be private</a></h3>
</blockquote>
<p>
	From the release announcement:</p>
<blockquote>
	<p>
		DeepEnds includes other dependency analysis tools to analyse coupling and cohesion, delete redundant code and</p>
	<p>
		identify classes to extracted from C code. It parses C++, C# and Visual Basic source code.</p>
	<p>
		The software is free to use until the end of August and will now install successfully via NuGet.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Product News,]]></dc:subject>
      <pubDate>Mon, 27 Jul 2020 16:29:33 +0000</pubDate>
      <dc:creator>zebedee</dc:creator>
    </item>

    <item>
      <title>PVS&#45;Studio: analyzing pull requests in Azure DevOps using self&#45;hosted agents</title>
      <link>https://isocpp.org//blog/2020/07/pvs-studio-analyzing-pull-requests-in-azure-devops-using-self-hosted-agents</link>
      <guid>https://isocpp.org//blog/2020/07/pvs-studio-analyzing-pull-requests-in-azure-devops-using-self-hosted-agents</guid>
      <description><![CDATA[<p>
	Static code analysis is most effective when changing a project, as errors are always more difficult to fix in the future than at an early stage. We continue expanding the options for using PVS-Studio in continuous development systems. This time, we&#39;ll show you how to configure pull request analysis using self-hosted agents in Microsoft Azure DevOps, using the example of the Minetest game.</p>
<blockquote>
	<h3>
		<a href="https://www.viva64.com/en/b/0751/">PVS-Studio: analyzing pull requests in Azure DevOps using self-hosted agents</a></h3>
	<p>
		by Alexey Govorov</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		The result is a build system based on MSBuild for C++, with Chocolatey for installing PVS-Studio, CMake, and Git. Vcpkg is built for convenient management of the libraries that the project depends on. Also, we have to download the latest version of the Azure Pipelines Agent. To initialize the agent from the ENTRYPOINT Docker file, the PowerShell script &#39;entrypoint.ps1&#39; is called, to which you need to add the URL of the project&#39;s "organization", the token of the agent pool, and the PVS-Studio license parameters....</p>
</blockquote>
<p>
	<br />
	&nbsp;</p>
<p>
	&nbsp;</p>]]></description>
      <dc:subject><![CDATA[Product News,]]></dc:subject>
      <pubDate>Mon, 27 Jul 2020 14:25:18 +0000</pubDate>
      <dc:creator>Andrey Karpov</dc:creator>
    </item>

    <item>
      <title>CppCon 2019: Maintainability and Refactoring Impact of Higher&#45;Level Design Features&#45;&#45;Titus Winters</title>
      <link>https://isocpp.org//blog/2020/07/maintainability-and-refactoring-impact-of-higher-level-design-features-titu</link>
      <guid>https://isocpp.org//blog/2020/07/maintainability-and-refactoring-impact-of-higher-level-design-features-titu</guid>
      <description><![CDATA[<p>
	<img alt="" src="https://i3.ytimg.com/vi/v_yzLe-wnfk/maxresdefault.jpg" style="width: 500px; height: 281px; margin: 10px; float: right;" />This year, CppCon 2020 is <a href="https://cppcon.org/going-virtual/">going virtual</a>. The dates are still the same &ndash; September 14-18 &ndash; and we are aiming for the CppCon live event to have pretty much everything you&rsquo;re familiar with at CppCon except moved online: multiple tracks including &ldquo;back to basics&rdquo; and a new &ldquo;embedded&rdquo; track; live speaker Q&amp;A; live talk time zones friendly to Americas and EMEA (and we&rsquo;re going to try to arrange around-the-clock recorded repeats in all time zones, where speakers who are available can be available for live Q&amp;A in their repeated talks too, and we&rsquo;ll do that if it&rsquo;s possible &ndash; but we&rsquo;re still working on it!); virtual tables where you can interact face-to-face online with other attendees just like at the physical event; virtual exhibitor spaces where you can meet the folks on your favorite product&rsquo;s teams to ask them question face-to-face; pre- and post-conference classes; and even the CppCon house band playing live before every plenary session. All talk recordings will be freely available as usual on YouTube a month or two after the event, but everything else above will be available only live during CppCon week.</p>
<p>
	To whet your appetite for this year&rsquo;s conference, here&rsquo;s another of the top-rated talks from last year. Enjoy &ndash; <a href="https://cppcon.org/registration/">and register today for CppCon 2020</a> &ndash; all the spirit and flavor of CppCon, this year all virtual and online!</p>
<blockquote>
	<h3>
		<a href="https://www.youtube.com/watch?v=v_yzLe-wnfk">Maintainability and Refactoring Impact of Higher-Level Design Features</a></h3>
	<p>
		by&nbsp;Titus Winters</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		Higher levels of abstraction are useful for building things out of, but also have a higher cognitive and maintenance cost. That is, it&#39;s a lot easier to refactor a function than it is to change a type, and similarly easier to deal with a single concrete type than a class template, or a Concept, or a meta-Concept ... In this talk I&#39;ll present example strategies for refactoring the interface of functions, classes, and class templates. I&#39;ll also discuss how the recent addition of Concepts and the proposals for even-more-abstract features affect long-term refactoring in C++. If you&#39;re interested in refactoring and it isn&#39;t immediately clear that a Concept published in a library can never change, this talk is for you.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand, Events,]]></dc:subject>
      <pubDate>Fri, 24 Jul 2020 21:00:20 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>July update on COVID&#45;19 and Meeting C++ 2020</title>
      <link>https://isocpp.org//blog/2020/07/july-update-on-covid-19-and-meeting-cpp-2020</link>
      <guid>https://isocpp.org//blog/2020/07/july-update-on-covid-19-and-meeting-cpp-2020</guid>
      <description><![CDATA[<p>
	An update on how the plans for Meeting C++ 2020 evolved.</p>
<blockquote>
	<h2>
		<a href="https://meetingcpp.com/meetingcpp/news/items/July-update-on-COVID-19-and-Meeting-Cpp-2020.html">July update on COVID-19 and Meeting C++ 2020</a></h2>
	<p>
		by Jens Weller</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		This is the July update for how the plans for Meeting C++ 2020 are evolving in this ongoing pandemic. One thing you can do until the weekend, is <a href="https://meetingcpp.com/mcpp/voting">to start voting on the talks for Meeting C++2020</a>!</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Events,]]></dc:subject>
      <pubDate>Thu, 23 Jul 2020 15:29:14 +0000</pubDate>
      <dc:creator>Meeting C++</dc:creator>
    </item>

    <item>
      <title>CppCon 2019: Back to Basics: Const as a Promise&#45;&#45;Dan Saks</title>
      <link>https://isocpp.org//blog/2020/07/cppcon-2019-back-to-basics-const-as-a-promise-dan-saks</link>
      <guid>https://isocpp.org//blog/2020/07/cppcon-2019-back-to-basics-const-as-a-promise-dan-saks</guid>
      <description><![CDATA[<p>
	<img alt="" src="https://i3.ytimg.com/vi/NZtr93iL3R0/maxresdefault.jpg" style="width: 500px; height: 281px; margin: 10px; float: right;" />This year, CppCon 2020 is <a href="https://cppcon.org/going-virtual/">going virtual</a>. The dates are still the same &ndash; September 14-18 &ndash; and we are aiming for the CppCon live event to have pretty much everything you&rsquo;re familiar with at CppCon except moved online: multiple tracks including &ldquo;back to basics&rdquo; and a new &ldquo;embedded&rdquo; track; live speaker Q&amp;A; live talk time zones friendly to Americas and EMEA (and we&rsquo;re going to try to arrange around-the-clock recorded repeats in all time zones, where speakers who are available can be available for live Q&amp;A in their repeated talks too, and we&rsquo;ll do that if it&rsquo;s possible &ndash; but we&rsquo;re still working on it!); virtual tables where you can interact face-to-face online with other attendees just like at the physical event; virtual exhibitor spaces where you can meet the folks on your favorite product&rsquo;s teams to ask them question face-to-face; pre- and post-conference classes; and even the CppCon house band playing live before every plenary session. All talk recordings will be freely available as usual on YouTube a month or two after the event, but everything else above will be available only live during CppCon week.</p>
<p>
	To whet your appetite for this year&rsquo;s conference, here&rsquo;s another of the top-rated talks from last year. Enjoy &ndash; <a href="https://cppcon.org/registration/">and register today for CppCon 2020</a> &ndash; all the spirit and flavor of CppCon, this year all virtual and online!</p>
<blockquote>
	<h3>
		<a href="https://www.youtube.com/watch?v=NZtr93iL3R0">Back to Basics: Const as a Promise</a></h3>
	<p>
		by&nbsp;Dan Saks</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		The const qualifier has various uses in C++. One of the most valuable uses is in declaring function headings that constrain the effects of function calls. Using const appropriately can reduce bugs and development time by turning potential run-time errors into compile-time errors that are much easier to find and correct. Using const can even reduce your program&rsquo;s code size and execution time.</p>
	<p>
		Despite these benefits, too many C++ programmers still use const reactively rather than proactively. That is, they tend to add const as needed to quell compiler error messages, rather than design const in as they code. To get the most out of const, programmers really need to understand (1) when and where to place const in declarations, (2) when to leave it out entirely, and (3) how type conversions involving const behave.</p>
	<p>
		The key insight about const is to understand const as a promise&mdash;a promise not to modify something. This session explains the real meaning of that promise and how that insight can guide you in declaring function parameters and return types. It also explains why you shouldn&rsquo;t declare by-value parameters and return types as const, why overloading on const is such a useful and ubiquitous idiom, and why it is meaningful to declare constexpr member functions as const.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand, Events,]]></dc:subject>
      <pubDate>Wed, 22 Jul 2020 18:14:54 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>Solving the Static Initialization Order Fiasco with C++20&#45;&#45;Rainer Grimm</title>
      <link>https://isocpp.org//blog/2020/07/solving-the-static-initialization-order-fiasco-with-cpp20-rainer-grimm</link>
      <guid>https://isocpp.org//blog/2020/07/solving-the-static-initialization-order-fiasco-with-cpp20-rainer-grimm</guid>
      <description><![CDATA[<p>
	Are you aware of the problem?</p>
<blockquote>
	<h3>
		<a href="http://www.modernescpp.com/index.php/c-20-static-initialization-order-fiasco">Solving the Static Initialization Order Fiasco with C++20</a></h3>
	<p>
		by Rainer Grimm</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		According to the FAQ of isocpp.org is the static initialization order fiasco "a subtle way to crash your program". The FAQ continues: The static initialization order problem is a very subtle and commonly misunderstood aspect of C++. ". Today, I write about this very subtle and misunderstood aspect of C++.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Wed, 22 Jul 2020 17:56:46 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>A plea for order &#45;&#45; Philipp Lenk</title>
      <link>https://isocpp.org//blog/2020/07/a-plea-for-order-philipp-lenk</link>
      <guid>https://isocpp.org//blog/2020/07/a-plea-for-order-philipp-lenk</guid>
      <description><![CDATA[<p>
	A few days ago, one particularly ambitious <strike>victim</strike> student of mine asked for assistance in tracking down a bug.</p>
<blockquote>
	<h3>
		<a href="https://codemetas.de/2020/07/15/A-plea-for-order.html">A plea for order</a></h3>
	<p>
		by Philipp Lenk</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		I know I promised to talk more about emulation, about chess and operating systems, but I have to get something off of my chest first. This is not going to be one of my would-be grand and elongated epics trying to cover far too much in far too many words. Instead, I shall focus on one very small, very self contained thing: the order of #include directives in C++ source code</p>
</blockquote>
<blockquote>
	<p>
		&nbsp;</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Wed, 22 Jul 2020 16:46:33 +0000</pubDate>
      <dc:creator>Rahel Natalie</dc:creator>
    </item>

    <item>
      <title>CopperSpice: A Guide to Maps</title>
      <link>https://isocpp.org//blog/2020/07/copperspice-a-guide-to-maps</link>
      <guid>https://isocpp.org//blog/2020/07/copperspice-a-guide-to-maps</guid>
      <description><![CDATA[<p>
	New video on the CopperSpice YouTube Channel:</p>
<blockquote>
	<h3>
		<a href="https://www.youtube.com/watch?v=TOeN0ILMUc8">A Guide to Maps</a></h3>
</blockquote>
<blockquote>
	<p>
		by Barbara Geller and Ansel Sermersheim</p>
</blockquote>
<p>
	About the video:</p>
<blockquote>
	<p>
		This video discusses the various types of C++ maps including the standard library containers and the new flatmap class available in third party libraries. We look at the underlying data structures so you can reason about picking the right one for your application, and talk about the various considerations that are involved in this choice.</p>
</blockquote>
<blockquote>
	<p>
		Please take a look and remember to subscribe!</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Wed, 22 Jul 2020 16:45:53 +0000</pubDate>
      <dc:creator>Ansel Sermersheim</dc:creator>
    </item>

    <item>
      <title>CppCon 2019: Range Algorithms, Views and Actions: A Comprehensive Guide&#45;&#45;Dvir Yitzchaki</title>
      <link>https://isocpp.org//blog/2020/07/cppcon-2019-range-algorithms-views-and-actions-a-comprehensive-guide-dvir-y</link>
      <guid>https://isocpp.org//blog/2020/07/cppcon-2019-range-algorithms-views-and-actions-a-comprehensive-guide-dvir-y</guid>
      <description><![CDATA[<p>
	<img alt="" src="https://i3.ytimg.com/vi/qQtS50ZChN8/maxresdefault.jpg" style="width: 500px; height: 281px; float: right; margin: 10px;" />This year, CppCon 2020 is <a href="https://cppcon.org/going-virtual/">going virtual</a>. The dates are still the same &ndash; September 14-18 &ndash; and we are aiming for the CppCon live event to have pretty much everything you&rsquo;re familiar with at CppCon except moved online: multiple tracks including &ldquo;back to basics&rdquo; and a new &ldquo;embedded&rdquo; track; live speaker Q&amp;A; live talk time zones friendly to Americas and EMEA (and we&rsquo;re going to try to arrange around-the-clock recorded repeats in all time zones, where speakers who are available can be available for live Q&amp;A in their repeated talks too, and we&rsquo;ll do that if it&rsquo;s possible &ndash; but we&rsquo;re still working on it!); virtual tables where you can interact face-to-face online with other attendees just like at the physical event; virtual exhibitor spaces where you can meet the folks on your favorite product&rsquo;s teams to ask them question face-to-face; pre- and post-conference classes; and even the CppCon house band playing live before every plenary session. All talk recordings will be freely available as usual on YouTube a month or two after the event, but everything else above will be available only live during CppCon week.</p>
<p>
	To whet your appetite for this year&rsquo;s conference, here&rsquo;s another of the top-rated talks from last year. Enjoy &ndash; <a href="https://cppcon.org/registration/">and register today for CppCon 2020</a> &ndash; all the spirit and flavor of CppCon, this year all virtual and online!</p>
<blockquote>
	<h3>
		<a href="https://www.youtube.com/watch?v=qQtS50ZChN8">Range Algorithms, Views and Actions: A Comprehensive Guide</a></h3>
	<p>
		by&nbsp;Dvir Yitzchaki</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		STL algorithms are something every C++ programmer should know. With ranges being voted in C++ 20, there are even more useful tools that we should at least be aware of, if not use daily.</p>
	<p>
		Using ranges helps writing a code which is great in expressiveness and safety and does not fall behind in performance. In this talk we will cover what ranges add to the C++20 standard library, as well as go over all the different views and actions available in range-v3 library which can be used today.</p>
	<p>
		This talk is inspired by Jonathan Boccara&rsquo;s talk "105 algorithms in less than an hour".</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand, Events,]]></dc:subject>
      <pubDate>Mon, 20 Jul 2020 16:34:08 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>Quick Q; Recursive unordered_map</title>
      <link>https://isocpp.org//blog/2020/07/quick-q-recursive-unordered-map</link>
      <guid>https://isocpp.org//blog/2020/07/quick-q-recursive-unordered-map</guid>
      <description><![CDATA[<p>
	Quick A: there is no guarantee for a container to work with incomplete types.</p>
<p>
	Recently on SO:</p>
<blockquote>
	<h3>
		<a href="https://stackoverflow.com/questions/62860623/recursive-unordered-map">Recursive unordered_map</a></h3>
	<p>
		STL containers are not required to work with incomplete types. If you don&#39;t mind extra indirection, then the workaround is <code>std::map&lt;int, std::unique_ptr&lt;Node&gt;&gt;</code>.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Mon, 20 Jul 2020 16:31:41 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>CppCon 2019: C++20: C++ at 40&#45;&#45;Bjarne Stroustrup</title>
      <link>https://isocpp.org//blog/2020/07/cppcon-2019-cpp20-c-at-40-bjarne-stroustrup</link>
      <guid>https://isocpp.org//blog/2020/07/cppcon-2019-cpp20-c-at-40-bjarne-stroustrup</guid>
      <description><![CDATA[<p>
	<img alt="" src="http://i3.ytimg.com/vi/u_ij0YNkFUs/maxresdefault.jpg" style="width: 500px; height: 281px; margin: 10px; float: right;" />This year, CppCon 2020 is <a href="https://cppcon.org/going-virtual/">going virtual</a>. The dates are still the same &ndash; September 14-18 &ndash; and we are aiming for the CppCon live event to have pretty much everything you&rsquo;re familiar with at CppCon except moved online: multiple tracks including &ldquo;back to basics&rdquo; and a new &ldquo;embedded&rdquo; track; live speaker Q&amp;A; live talk time zones friendly to Americas and EMEA (and we&rsquo;re going to try to arrange around-the-clock recorded repeats in all time zones, where speakers who are available can be available for live Q&amp;A in their repeated talks too, and we&rsquo;ll do that if it&rsquo;s possible &ndash; but we&rsquo;re still working on it!); virtual tables where you can interact face-to-face online with other attendees just like at the physical event; virtual exhibitor spaces where you can meet the folks on your favorite product&rsquo;s teams to ask them question face-to-face; pre- and post-conference classes; and even the CppCon house band playing live before every plenary session. All talk recordings will be freely available as usual on YouTube a month or two after the event, but everything else above will be available only live during CppCon week.</p>
<p>
	To whet your appetite for this year&rsquo;s conference, here&rsquo;s another of the top-rated talks from last year. Enjoy &ndash; <a href="https://cppcon.org/registration/">and register today for CppCon 2020</a> &ndash; all the spirit and flavor of CppCon, this year all virtual and online!</p>
<blockquote>
	<h3>
		<a href="https://www.youtube.com/watch?v=u_ij0YNkFUs&amp;list=PLHTh1InhhwT6KhvViwRiTR7I5s09dLCSw&amp;index=2&amp;t=0s">C++20: C++ at 40</a></h3>
	<p>
		by&nbsp;Bjarne Stroustrup</p>
</blockquote>
<p>
	Summary of the talk:</p>
<blockquote>
	<p>
		It is now 40 years since C++ (then called C with Classes) had its first non-research user. It is now 35 years since the first commercial release of C++. It is now 30 years since the start of the standards process.</p>
	<p>
		So what is C++? I will try to explain what&#39;s great about C++, C++20, as a modern language, not treating it as a layer cake of features. Imagine you have never heard of C, C with Classes, or C++11. How do classes, templates, and lambdas fit together? What have constructors and destructors to do with exceptions? What&#39;s in the standard library? How can we start using C++?</p>
	<p>
		Finally, I will make a few comments about how to get from older styles of C++ use to modern C++ and point to areas where we need to improve C++ further.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand, Events,]]></dc:subject>
      <pubDate>Fri, 17 Jul 2020 18:44:39 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>8 years of Meeting C++</title>
      <link>https://isocpp.org//blog/2020/07/8-years-of-meeting-cpp</link>
      <guid>https://isocpp.org//blog/2020/07/8-years-of-meeting-cpp</guid>
      <description><![CDATA[<p>
	8 years ago in 2012, Meeting C++ got started!</p>
<blockquote>
	<h2>
		<a href="https://meetingcpp.com/blog/items/8-years-of-Meeting-Cpp.html">8 years of Meeting C++</a></h2>
	<p>
		by Jens Weller</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		In 2012 Meeting C++ got started in July. Planned first to be a one off conference, now it is a successfull international conference and a platform for C++ on the internet.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Fri, 17 Jul 2020 11:54:42 +0000</pubDate>
      <dc:creator>Meeting C++</dc:creator>
    </item>

    <item>
      <title>Initial Support For C++20 Ranges&#45;&#45;Casey Carter</title>
      <link>https://isocpp.org//blog/2020/07/initial-support-for-cpp20-ranges-casey-carter</link>
      <guid>https://isocpp.org//blog/2020/07/initial-support-for-cpp20-ranges-casey-carter</guid>
      <description><![CDATA[<p>
	<img alt="" src="https://devblogs.microsoft.com/cppblog/wp-content/uploads/sites/9/2018/08/cplusplusfeature.png" style="width: 300px; height: 188px; float: right; margin: 10px;" />Ready to try them?</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/cppblog/initial-support-for-c20-ranges/">Initial Support For C++20 Ranges</a></h3>
	<p>
		by&nbsp;Casey Carter</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		We are happy to announce that Visual Studio 2019 version 16.6 contains the first user-visible pieces of C++20 Ranges support. We&rsquo;ve been working on support machinery for a few releases now, but in this release the tip of the iceberg has finally broken the surface of the water and there are now some tools available for users. The Ranges implementation critically depends on C++ Concepts, and as such is usable with both MSVC and Clang in their C++20 Preview modes but not yet well-supported by IntelliSense. (Don&rsquo;t worry, we&rsquo;ll have proper IntelliSense support soon.)...</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Product News,]]></dc:subject>
      <pubDate>Thu, 16 Jul 2020 19:48:30 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>Two new Keywords in C++20: consteval and constinit&#45;&#45;Rainer Grimm</title>
      <link>https://isocpp.org//blog/2020/07/two-new-keywords-in-cpp20-consteval-and-constinit-rainer-grimm</link>
      <guid>https://isocpp.org//blog/2020/07/two-new-keywords-in-cpp20-consteval-and-constinit-rainer-grimm</guid>
      <description><![CDATA[<p>
	The series continue.</p>
<blockquote>
	<h3>
		<a href="http://www.modernescpp.com/index.php/c-20-consteval-and-constinit">Two new Keywords in C++20: consteval and constinit</a></h3>
	<p>
		by Rainer Grimm</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		With C++20 we get two new keywords: consteval and constinit. consteval produces a function that is executed at compile-time and constinit guarantees that a variable is initialized at compile-time...</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Thu, 16 Jul 2020 19:07:40 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>Quick Q: Is it possible to make template specialization for zero template arguments?</title>
      <link>https://isocpp.org//blog/2020/07/quick-q-is-it-possible-to-make-template-specialization-for-zero-template-ar</link>
      <guid>https://isocpp.org//blog/2020/07/quick-q-is-it-possible-to-make-template-specialization-for-zero-template-ar</guid>
      <description><![CDATA[<p>
	Quick A: Do you need it?</p>
<p>
	Recently on SO:</p>
<blockquote>
	<h3>
		<a href="https://stackoverflow.com/questions/62847200/is-it-possible-to-make-template-specialization-for-zero-template-arguments">Is it possible to make template specialization for zero template arguments?</a></h3>
	<p>
		If T is used only for the constructor, you don&#39;t need to template the whole class;</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Thu, 16 Jul 2020 19:04:48 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>The voting on the talks for Meeting C++ 2020 begins!</title>
      <link>https://isocpp.org//blog/2020/07/the-voting-on-the-talks-for-meeting-cpp-2020-begins</link>
      <guid>https://isocpp.org//blog/2020/07/the-voting-on-the-talks-for-meeting-cpp-2020-begins</guid>
      <description><![CDATA[<p>
	The yearly voting for the program of the yearly Meeting C++ Conference has started!</p>
<blockquote>
	<h2>
		<a href="https://meetingcpp.com/meetingcpp/news/items/The-voting-on-the-talks-for-Meeting-Cpp-2020-begins-.html">The voting on the talks for Meeting C++ 2020 begins!</a></h2>
	<p>
		by Jens Weller</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		With today, you can <a href="https://meetingcpp.com/mcpp/voting">start to vote</a> on all submitted talks for Meeting C++ 2020! As 2020 is a bit special, it is less talks, but also this years conference will only feature one track, the voting will give me guiding in which talks to choose from speakers with multiple talks, but also will help to see which other speakers might should make it to the conference. Unlike prior years the main track can&#39;t be the mostly consisting out of the most popular talks of the voting.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Events,]]></dc:subject>
      <pubDate>Tue, 14 Jul 2020 13:41:36 +0000</pubDate>
      <dc:creator>Meeting C++</dc:creator>
    </item>

    <item>
      <title>Scoped (class) enums: fundamentals and examples &#45;&#45; Hitesh Kumar</title>
      <link>https://isocpp.org//blog/2020/07/scoped-class-enums-fundamentals-and-examples-nextptr</link>
      <guid>https://isocpp.org//blog/2020/07/scoped-class-enums-fundamentals-and-examples-nextptr</guid>
      <description><![CDATA[<p>
	C++11 scoped enums deep dive and comparison with C++98 unscoped enums.</p>
<blockquote>
	<h3>
		<a href="https://www.nextptr.com/tutorial/ta1423015134/scoped-class-enums-fundamentals-and-examples">Scoped (class) enums: fundamentals and examples</a></h3>
</blockquote>
<blockquote>
	<p>
		by Hitesh Kumar</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Scoped enums (enum class/struct) are strongly typed enumerations introduced in C++11. They address several shortcomings of the old C-style (C++98) enums, mainly associated with type-safety and name collisions.</p>
</blockquote>
<p>
	&nbsp;</p>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Sat, 11 Jul 2020 20:27:08 +0000</pubDate>
      <dc:creator>Hitesh Kumar</dc:creator>
    </item>

    <item>
      <title>Designated Initializers&#45;&#45;Rainer Grimm</title>
      <link>https://isocpp.org//blog/2020/07/designated-initializers-rainer-grimm</link>
      <guid>https://isocpp.org//blog/2020/07/designated-initializers-rainer-grimm</guid>
      <description><![CDATA[<p>
	The series continue.</p>
<blockquote>
	<h3>
		<a href="http://www.modernescpp.com/index.php/designated-initializers">Designated Initializers</a></h3>
	<p>
		by Rainer Grimm</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Designated initialization is an extension of aggregate initialization and empowers you to directly initialize the members of a class type using their names...</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Wed, 08 Jul 2020 20:32:04 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>C++20 Features and Fixes in VS 2019 16.1 through 16.6&#45;&#45;Stephan T. Lavavej</title>
      <link>https://isocpp.org//blog/2020/07/cpp20-features-and-fixes-in-vs-2019-16.1-through-16.6-stephan-t.-lavavej</link>
      <guid>https://isocpp.org//blog/2020/07/cpp20-features-and-fixes-in-vs-2019-16.1-through-16.6-stephan-t.-lavavej</guid>
      <description><![CDATA[<p>
	Did you get up to date?</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/cppblog/c20-features-and-fixes-in-vs-2019-16-1-through-16-6/">C++20 Features and Fixes in VS 2019 16.1 through 16.6</a></h3>
	<p>
		by&nbsp;Stephan T. Lavavej</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		We&rsquo;ve been busy implementing C++20 features in MSVC&rsquo;s compiler and Standard Library, and migrating the latter to microsoft/STL on GitHub &ndash; in fact, we&rsquo;ve been so busy that we haven&rsquo;t posted a C++ toolset changelog since the VS 2019 16.0 toolset changelog. So, here are the compiler features and STL features/fixes that have shipped for production use in the last year.</p>
	<p>
		As a reminder, the /std:c++17 and /std:c++latest compiler options are necessary to use C++17 and C++20 features...</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Product News,]]></dc:subject>
      <pubDate>Wed, 08 Jul 2020 20:27:58 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>C++ on Sea : Full schedule, Nico Josuttis Keynote and Remo as a platform</title>
      <link>https://isocpp.org//blog/2020/07/cpp-on-sea-full-schedule-nico-josuttis-keynote-and-remo-as-a-platform</link>
      <guid>https://isocpp.org//blog/2020/07/cpp-on-sea-full-schedule-nico-josuttis-keynote-and-remo-as-a-platform</guid>
      <description><![CDATA[<p>
	With less than two weeks to go before the conference (in fact only one week before the first workshop), we have some big announcements!</p>
<p>
	<img alt="" src="https://cpponsea.uk/assets/cpponsea-logo-text.png" style="text-align: right; width: 230px; height: 222px; float: right;" /></p>
<div>
	<div style="text-align: right;">
		&nbsp;</div>
</div>
<div>
	<blockquote>
		<h3>
			<a href="https://cpponsea.uk/news/full-schedule-nico-josuttis-keynote-and-remo-as-a-platform.html">Full schedule, Nico Josuttis Keynote and Remo as a platform</a></h3>
		<p>
			by C++ on Sea</p>
	</blockquote>
	<p>
		From the article:</p>
	<blockquote>
		<p>
			After evaluating many options, including building our own solution (from component parts), we have settled on a fairly new system called Remo. What we love about Remo is that it&#39;s the closest thing we&#39;ve found to recreating the experience of being at a physical event</p>
	</blockquote>
</div>
<p>
	&nbsp;</p>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand, Events, Training,]]></dc:subject>
      <pubDate>Wed, 08 Jul 2020 18:01:21 +0000</pubDate>
      <dc:creator>philsquared</dc:creator>
    </item>

    <item>
      <title>PVS&#45;Studio is now in Compiler Explorer!</title>
      <link>https://isocpp.org//blog/2020/07/pvs-studio-is-now-in-compiler-explorer</link>
      <guid>https://isocpp.org//blog/2020/07/pvs-studio-is-now-in-compiler-explorer</guid>
      <description><![CDATA[<p>
	Now you can quickly and easily analyze the code for errors right on the godbolt.org site (Compiler Explorer). This feature opens up a large number of new possibilities &ndash; from quenching curiosity about the analyzer&#39;s abilities to being able to quickly share check results with a friend. Caution &ndash; GIFs!</p>
<blockquote>
	<h3>
		<a href="https://www.viva64.com/en/b/0747/">PVS-Studio is now in Compiler Explorer</a></h3>
	<p>
		by George Gribkov</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		If you want to see the output of your program, you can open the execution window by clicking "Add new... - &gt; Execution only" in the code editor (not in the compiler window). In the gif below, you can see the output of the lab work taken from our <a href="https://www.viva64.com/en/for-students/">page</a> about free usage of PVS-Studio by students and teachers.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[Product News,]]></dc:subject>
      <pubDate>Mon, 06 Jul 2020 11:40:56 +0000</pubDate>
      <dc:creator>Andrey Karpov</dc:creator>
    </item>

    <item>
      <title>SonarQube / SonarCloud Improved Analysis &#45;&#45; Alexandre Gigleux</title>
      <link>https://isocpp.org//blog/2020/07/sonarqube-sonarcloud-detect-security-sensitive-apis-support-more-compilers</link>
      <guid>https://isocpp.org//blog/2020/07/sonarqube-sonarcloud-detect-security-sensitive-apis-support-more-compilers</guid>
      <description><![CDATA[<p>
	With recent releases SonarQube and SonarCloud offer expanded compiler support and additional security-related rules.</p>
<blockquote>
	<h3>
		<a href="https://community.sonarsource.com/t/c-c-analysis-engine-supports-more-compilers-and-detects-buffer-overflow-security-sensitive-apis/26542">Improved C/C++ analysis</a></h3>
</blockquote>
<blockquote>
	<p>
		By Alexandre Gigleux</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		There are tons of C/C++ compilers out there and we always get many requests by many users about additional compilers support. We listened and added the support of 10+ compilers to allow more developers to benefit from our C/C++ rules.</p>
</blockquote>
<blockquote>
	<p>
		We want to help C/C++ developers to deliver code in production without vulnerabilities and more precisely we want to avoid buffer overflow to be exploited by hackers. This is why we implemented 4 rules looking at APIs that could be badly used and that open the door to buffer overflow attacks</p>
</blockquote>
<p>
	&nbsp;</p>]]></description>
      <dc:subject><![CDATA[News, Product News,]]></dc:subject>
      <pubDate>Thu, 02 Jul 2020 20:51:18 +0000</pubDate>
      <dc:creator>ganncamp</dc:creator>
    </item>

    <item>
      <title>Polymorphic Allocators, std::vector Growth and Hacking</title>
      <link>https://isocpp.org//blog/2020/06/polymorphic-allocators-stdvector-growth-and-hacking</link>
      <guid>https://isocpp.org//blog/2020/06/polymorphic-allocators-stdvector-growth-and-hacking</guid>
      <description><![CDATA[<p>
	Did you know them?</p>
<blockquote>
	<h3>
		<a href="https://www.bfilipek.com/2020/06/pmr-hacking.html">Polymorphic Allocators, std::vector Growth and Hacking</a></h3>
	<p>
		by&nbsp;Bartlomiej Filipek</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		The concept of a polymorphic allocator from C++17 is an enhancement to standard allocators from the Standard Library.</p>
	<p>
		It&rsquo;s much easier to use than a regular allocator and allows containers to have the same type while having a different allocator, or even a possibility to change allocators at runtime.</p>
	<p>
		Let&rsquo;s see how we can use it and hack to see the growth of std::vector containers...</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Tue, 30 Jun 2020 17:06:09 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>Stupid std::tuple tricks: Finding a type in a tuple</title>
      <link>https://isocpp.org//blog/2020/06/stupid-stdtuple-tricks-finding-a-type-in-a-tuple</link>
      <guid>https://isocpp.org//blog/2020/06/stupid-stdtuple-tricks-finding-a-type-in-a-tuple</guid>
      <description><![CDATA[<p>
	The series continue.</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20200629-00/?p=103910">Stupid std::tuple tricks: Finding a type in a tuple</a></h3>
	<p>
		by&nbsp;Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Given a tuple, you can extract the type of the Nth element in the tuple with the help of std::tuple_element_t&lt;N, Tuple&gt;...</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Tue, 30 Jun 2020 17:04:42 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>ModernCppStarter &amp;amp; PVS&#45;Studio Static Code Analyzer</title>
      <link>https://isocpp.org//blog/2020/06/moderncppstarter-pvs-studio-static-code-analyzer</link>
      <guid>https://isocpp.org//blog/2020/06/moderncppstarter-pvs-studio-static-code-analyzer</guid>
      <description><![CDATA[<p>
	One of the ways to improve software quality is to check source code with static analysis tools. This section explains how to use the PVS-Studio analyzer to check projects built on ModernCppStarter. We provide a free license for open-source projects.</p>
<blockquote>
	<h3>
		<a href="https://github.com/viva64/pvs-studio-cmake-examples/tree/master/modern-cpp-starter">ModernCppStarter &amp; PVS-Studio Static Code Analyzer</a></h3>
	<p>
		by PVS-Studio Team</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		plog-converter will convert the report into the errorfile format (similar to GCC&#39;s messages), which can be conveniently viewed in a terminal window and the IDE. You can also have the report converted to an HTML file by using the -t fullhtml flag. Use the flags -a and -d to filter diagnostics. Run the plog-converter --help command to view the full list of available options.</p>
</blockquote>
<p>
	&nbsp;</p>]]></description>
      <dc:subject><![CDATA[Product News,]]></dc:subject>
      <pubDate>Mon, 29 Jun 2020 17:10:15 +0000</pubDate>
      <dc:creator>Andrey Karpov</dc:creator>
    </item>

    <item>
      <title>Stupid std::tuple tricks: Creating more interesting index sequences&#45;&#45;Raymond Chen</title>
      <link>https://isocpp.org//blog/2020/06/stupid-stdtuple-tricks-creating-more-interesting-index-sequences-raymond-ch</link>
      <guid>https://isocpp.org//blog/2020/06/stupid-stdtuple-tricks-creating-more-interesting-index-sequences-raymond-ch</guid>
      <description><![CDATA[<p>
	The series continue.</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20200626-00/?p=103896">Stupid std::tuple tricks: Creating more interesting index sequences</a></h3>
	<p>
		by&nbsp;Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Last time, we wrote offset_sequence_t, which takes an existing sequence and adds a fixed value to each element. This is the sort of index manipulation you may want to generalize. So let&rsquo;s generalize it...</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Mon, 29 Jun 2020 15:36:19 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>Stupid std::tuple tricks: Creating interesting index sequences&#45;&#45;Raymond Chen</title>
      <link>https://isocpp.org//blog/2020/06/stupid-stdtuple-tricks-creating-interesting-index-sequences-raymond-chen</link>
      <guid>https://isocpp.org//blog/2020/06/stupid-stdtuple-tricks-creating-interesting-index-sequences-raymond-chen</guid>
      <description><![CDATA[<p>
	The series continue.</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20200625-00/?p=103890">Stupid std::tuple tricks: Creating interesting index sequences</a></h3>
	<p>
		by&nbsp;Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		We saw last time that manipulating tuples boils down to the index_sequence. The problem is that the C++ standard library doesn&rsquo;t provide very much in the way of helpers to manipulate these index sequences...</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Mon, 29 Jun 2020 15:35:47 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>Stupid std::tuple tricks: Selecting via an index sequence, part 2&#45;&#45;Raymond Chen</title>
      <link>https://isocpp.org//blog/2020/06/stupid-stdtuple-tricks-selecting-via-an-index-sequence-part-2-raymond-chen</link>
      <guid>https://isocpp.org//blog/2020/06/stupid-stdtuple-tricks-selecting-via-an-index-sequence-part-2-raymond-chen</guid>
      <description><![CDATA[<p>
	The series continue.</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20200624-00/?p=103886">Stupid std::tuple tricks: Selecting via an index sequence, part 2</a></h3>
	<p>
		by&nbsp;Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Last time, we developed the select_tuple function which takes a tuple and an index sequence and produces a new tuple that selects the elements based on the index sequence...</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Mon, 29 Jun 2020 15:33:28 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>C++ Template: A Quick UpToDate Look(C++11/14/17/20)&#45;&#45;Vishal Chovatiya</title>
      <link>https://isocpp.org//blog/2020/06/cpp-template-a-quick-uptodate-lookc11-14-17-20-vishal-chovatiya</link>
      <guid>https://isocpp.org//blog/2020/06/cpp-template-a-quick-uptodate-lookc11-14-17-20-vishal-chovatiya</guid>
      <description><![CDATA[<p>
	<img alt="" src="https://secureservercdn.net/160.153.137.218/bkh.972.myftpupload.com/wp-content/uploads/Cpp-Template-Vishal-Chovatiya.webp?time=1592926465" style="width: 400px; height: 174px; margin: 10px; float: right;" />All you need to know;</p>
<blockquote>
	<h3>
		<a href="http://www.vishalchovatiya.com/c-template-a-quick-uptodate-look/">C++ Template: A Quick UpToDate Look(C++11/14/17/20)</a></h3>
	<p>
		by&nbsp;Vishal Chovatiya</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		I know, it&rsquo;s been a while since the last time I published something newbies-friendly on my blog. The main reason is that most of my readers are either experienced devs or from C background having modest C++ encounter. But while programming in C++ you need a completely different mindset as both C &amp; C++ belongs to different programming paradigm. And I always strive to show them a better way of doing things in C++. Anyway, I found the topic which is lengthy, reasonably complex(at least it was for me), newbies-friendly as well as energizing for experienced folks(if Modern C++ jargons, rules &amp; features added) i.e. C++ Template.</p>
	<p>
		I will start with a simple class/function template and as we move along, will increase the complexity. And also cover the advance topics like the variadic template, nested template, CRTP, template vs fold-expression, etc. But, yes! we would not take deeper dive otherwise this would become a book rather than an article.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Wed, 24 Jun 2020 17:54:32 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>The C++ Lambda Story Book&#45;&#45;Bartlomiej Filipek</title>
      <link>https://isocpp.org//blog/2020/06/the-cpp-lambda-story-book-bartlomiej-filipek</link>
      <guid>https://isocpp.org//blog/2020/06/the-cpp-lambda-story-book-bartlomiej-filipek</guid>
      <description><![CDATA[<p>
	<img alt="" src="https://1.bp.blogspot.com/-bgU38hMUSRM/Xuyl-8jaQPI/AAAAAAAAEf4/PEoy3oQnS64zn945hiyZLMwik84vSvs5QCK4BGAsYHg/w155-h200/sidelambda_200.png" style="width: 155px; height: 200px; margin: 10px; float: right;" />Getting up to date.</p>
<blockquote>
	<h3>
		<a href="https://www.bfilipek.com/2020/06/lambdastory.html?m=1">The C++ Lambda Story Book</a></h3>
	<p>
		by&nbsp;Bartlomiej Filipek</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Lambda Expressions appeared in C++11, and since then they become one of the most distinguishing features of Modern C++. What&rsquo;s more, with each revision of the Standard the ISO Committee improved the syntax and capabilities of lambdas, so they are even more comfortable to use.</p>
	<p>
		Read on to see how you can learn all the details of this powerful modern C++ feature.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Wed, 24 Jun 2020 17:51:07 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>Stupid std::tuple tricks: Selecting via an index sequence</title>
      <link>https://isocpp.org//blog/2020/06/stupid-stdtuple-tricks-selecting-via-an-index-sequence</link>
      <guid>https://isocpp.org//blog/2020/06/stupid-stdtuple-tricks-selecting-via-an-index-sequence</guid>
      <description><![CDATA[<p>
	The series continue.</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20200623-00/?p=103883">Stupid std::tuple tricks: Selecting via an index sequence</a></h3>
	<p>
		by&nbsp;Raymond Chen</p>
</blockquote>
<p>
	from the article:</p>
<blockquote>
	<p>
		Last time, we combined tuples. That&rsquo;s relatively straightforward. Splitting them apart is harder.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Wed, 24 Jun 2020 17:49:55 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>&amp;quot;C++ Move Semantics &#45; The Complete Guide&amp;quot; now Feature Complete &#45;&#45; Nico Josuttis</title>
      <link>https://isocpp.org//blog/2020/06/cpp-move-semantics-the-complete-guide-now-feature-complete</link>
      <guid>https://isocpp.org//blog/2020/06/cpp-move-semantics-the-complete-guide-now-feature-complete</guid>
      <description><![CDATA[<p>
	The new book by Nico Josuttis is now available as an ebook draft.</p>
<blockquote>
	<h3>
		<a href="https://leanpub.com/cppmove">C++ Move Semantics - The Complete Guide</a></h3>
	<p>
		by Nico Josuttis</p>
</blockquote>
<p>
	About the book:</p>
<blockquote>
	<p>
		Having 200 pages, the description of move semantics is feature complete now. Only a few chapters about the use of move semantics in the C++ standard library are missing.</p>
	<p>
		The book teaches all aspects of C++ move semantics. Starting from the basic principles it motivates and explains all features and corner cases (such as perfect returning with <code>decltype(auto)</code>) so that a C++ programmer can understand and use move semantics right in application code, when implementing classes, in generic code, and in foundation libraries.</p>
</blockquote>
<p>
	<br />
	&nbsp;</p>]]></description>
      <dc:subject><![CDATA[News, Articles & Books, Standardization,]]></dc:subject>
      <pubDate>Tue, 23 Jun 2020 20:15:52 +0000</pubDate>
      <dc:creator>Nico Josuttis</dc:creator>
    </item>

    <item>
      <title>Transforming C to C++</title>
      <link>https://isocpp.org//blog/2020/06/transforming-c-to-cpp</link>
      <guid>https://isocpp.org//blog/2020/06/transforming-c-to-cpp</guid>
      <description><![CDATA[<p>
	New video on using the latest version of <a href="https://www.deepends.co.uk/">DeepEnds</a>.</p>
<blockquote>
	<h3>
		<a href="https://www.youtube.com/watch?v=Fvl5XrcpSwo">Transforming C to C++</a></h3>
	<p>
		by Zeb Mason</p>
</blockquote>
<p>
	About the video:</p>
<blockquote>
	<p>
		Performs a clustering analysis on a C call graph then manipulates it within Visual Studio to prototype a class.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Product News,]]></dc:subject>
      <pubDate>Tue, 23 Jun 2020 20:11:15 +0000</pubDate>
      <dc:creator>zebedee</dc:creator>
    </item>

    <item>
      <title>Part 2: Ray Tracing in one weekend with SYCL</title>
      <link>https://isocpp.org//blog/2020/06/part-2-ray-tracing-in-one-weekend-with-sycl</link>
      <guid>https://isocpp.org//blog/2020/06/part-2-ray-tracing-in-one-weekend-with-sycl</guid>
      <description><![CDATA[<p>
	SYCL is an open standard developed by the Khronos&trade; Group that enables developers to write code for heterogeneous systems using standard C++.</p>
<blockquote>
	<h3>
		<a href="https://codeplay.com/portal/06-19-20-ray-tracing-in-a-weekend-with-sycl-part-2-pixel-sampling-and-material-tracing">Ray-tracing in One Weekend with SYCL Part 2</a></h3>
</blockquote>
<p>
	&nbsp;&nbsp;&nbsp; by Codeplay</p>
<p>
	About the article</p>
<blockquote>
	<p>
		C++ Ray-Tracing in a Weekend by Peter Shirley is a great resource to start learning about ray-tracers and how to implement one, and at the same time providing all the source code in a GitHub repository . You can find more information about his books on ray-tracing techniques with accompanying implementations on his blog, and you can also download the books as .pdf, or load them on your Kindle device for free from the GitHub project.</p>
	<p>
		This post follows on from the first part of my blog, where I showed how the I adapted the code from "Ray Tracing in one weekend" to increase performance using SYCL&trade;. The first area I tackled was the rendering.</p>
	<p>
		In this second post I&#39;ll show how to use SYCL to improve the performance of this code further using some interesting techniques.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Tue, 23 Jun 2020 20:08:18 +0000</pubDate>
      <dc:creator>rodburns</dc:creator>
    </item>

    <item>
      <title>CopperSpice: Copy Elision</title>
      <link>https://isocpp.org//blog/2020/06/copperspice-copy-elision</link>
      <guid>https://isocpp.org//blog/2020/06/copperspice-copy-elision</guid>
      <description><![CDATA[<p>
	New video on the CopperSpice YouTube Channel:</p>
<blockquote>
	<h3>
		<a href="https://www.youtube.com/watch?v=_zZWUZEwXk8">Copy Elision</a></h3>
</blockquote>
<blockquote>
	<p>
		by Barbara Geller and Ansel Sermersheim</p>
</blockquote>
<p>
	About the video:</p>
<blockquote>
	<p>
		In this video, we look at what copy elision is, and in the process define elision and what it means to copy. We also talk about why you would want to elide copies, and why this feature needed explicit permission in the standard.</p>
</blockquote>
<blockquote>
	<p>
		Please take a look and remember to subscribe!</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Tue, 23 Jun 2020 20:03:28 +0000</pubDate>
      <dc:creator>Ansel Sermersheim</dc:creator>
    </item>

    <item>
      <title>C++20: More Details to the Spaceship Operator&#45;&#45;Rainer Grimm</title>
      <link>https://isocpp.org//blog/2020/06/cpp20-more-details-to-the-spaceship-operator-rainer-grimm</link>
      <guid>https://isocpp.org//blog/2020/06/cpp20-more-details-to-the-spaceship-operator-rainer-grimm</guid>
      <description><![CDATA[<p>
	More on the next standard.</p>
<blockquote>
	<h3>
		<a href="http://www.modernescpp.com/index.php/c-20-more-details-to-the-spaceship-operator">C++20: More Details to the Spaceship Operator</a></h3>
	<p>
		by Rainer Grimm</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		The compiler performs quite a clever job when it generates all six comparison operators. On the end, you get the intuitive and efficient comparison operators for free. Let me dive with this post into the details of the spaceship operator...</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Tue, 23 Jun 2020 18:17:29 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>Stupid std::tuple tricks: Getting started&#45;&#45;Raymond Chen</title>
      <link>https://isocpp.org//blog/2020/06/stupid-stdtuple-tricks-getting-started-raymond-chen</link>
      <guid>https://isocpp.org//blog/2020/06/stupid-stdtuple-tricks-getting-started-raymond-chen</guid>
      <description><![CDATA[<p>
	Are you using tuples?</p>
<blockquote>
	<h3>
		<a href="https://devblogs.microsoft.com/oldnewthing/20200622-00/?p=103880">Stupid std::tuple tricks: Getting started</a></h3>
	<p>
		by&nbsp;Raymond Chen</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		The C++ standard library tuple is quite versatile. It&rsquo;s a handy way of grabbing a bunch of types or values into a single unit, and the C++ standard library also provides a number of helpers to manipulate them...</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Tue, 23 Jun 2020 18:16:17 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>Modules Present and Future&#45;&#45;CppCast</title>
      <link>https://isocpp.org//blog/2020/06/modules-present-and-future-cppcast</link>
      <guid>https://isocpp.org//blog/2020/06/modules-present-and-future-cppcast</guid>
      <description><![CDATA[<p>
	It will change things.</p>
<blockquote>
	<h3>
		<a href="https://cppcast.com/modules-gaby-dos-reis/">Modules Present and Future</a></h3>
	<p>
		by CppCast</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Rob and Jason are joined by Gabriel Dos Reis from Microsoft. They first discuss the recent articles about Microsoft switching from C++ to Rust and let Gaby set the record straight. Then Gaby talks about the final state of Modules, how Microsoft is using them internally, and Gaby&rsquo;s plans for the future of Modules and much more.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Video & On-Demand,]]></dc:subject>
      <pubDate>Tue, 23 Jun 2020 17:55:57 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>2020&#45;06 mailing available</title>
      <link>https://isocpp.org//blog/2020/06/2020-06-mailing-available</link>
      <guid>https://isocpp.org//blog/2020/06/2020-06-mailing-available</guid>
      <description><![CDATA[<p>
	The 2020-06 mailing of new standards papers is now available.</p>
<p>
	&nbsp;</p>
<table border="1" summary="See previous paragraph.">
	<thead>
		<tr>
			<th>
				WG21 Number</th>
			<th>
				Title</th>
			<th>
				Author</th>
			<th>
				Document Date</th>
			<th>
				Mailing Date</th>
			<th>
				Previous Version</th>
			<th>
				Subgroup</th>
			<!--            <th>Disposition</th> -->
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>
				<a href="https://wg21.link/P1401R3">P1401R3</a></td>
			<td>
				Narrowing contextual conversions to bool</td>
			<td>
				Andrzej Krzemie&#324;ski</td>
			<td>
				2020-05-27</td>
			<td>
				2020-06</td>
			<td>
				<a href="https://wg21.link/P1401R2">P1401R2</a></td>
			<td>
				EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P1450R3">P1450R3</a></td>
			<td>
				Enriching type modification traits</td>
			<td>
				Vincent Reverdy</td>
			<td>
				2020-06-15</td>
			<td>
				2020-06</td>
			<td>
				<a href="https://wg21.link/P1450R2">P1450R2</a></td>
			<td>
				LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P1467R4">P1467R4</a></td>
			<td>
				Extended floating-point types and standard names</td>
			<td>
				David Olsen</td>
			<td>
				2020-06-14</td>
			<td>
				2020-06</td>
			<td>
				<a href="https://wg21.link/P1467R3">P1467R3</a></td>
			<td>
				EWG Evolution,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P1468R4">P1468R4</a></td>
			<td>
				Fixed-layout floating-point type aliases</td>
			<td>
				David Olsen</td>
			<td>
				2020-06-14</td>
			<td>
				2020-06</td>
			<td>
				<a href="https://wg21.link/P1468R3">P1468R3</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P1642R3">P1642R3</a></td>
			<td>
				Freestanding Library: Easy [utilities], [ranges], and [iterators]</td>
			<td>
				Ben Craig</td>
			<td>
				2020-05-24</td>
			<td>
				2020-06</td>
			<td>
				<a href="https://wg21.link/P1642R2">P1642R2</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P1944R1">P1944R1</a></td>
			<td>
				Add Constexpr Modifiers to Functions in cstring and cwchar Headers</td>
			<td>
				Daniil Goncharov</td>
			<td>
				2020-05-26</td>
			<td>
				2020-06</td>
			<td>
				<a href="https://wg21.link/P1944R0">P1944R0</a></td>
			<td>
				SG16 Unicode,LEWGI SG18: LEWG Incubator,LEWG Library Evolution,LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P1949R4">P1949R4</a></td>
			<td>
				C++ Identifier Syntax using Unicode Standard Annex 31</td>
			<td>
				Steve Downey</td>
			<td>
				2020-06-05</td>
			<td>
				2020-06</td>
			<td>
				<a href="https://wg21.link/P1949R3">P1949R3</a></td>
			<td>
				SG16 Unicode,EWG Evolution,CWG Core</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P1990R1">P1990R1</a></td>
			<td>
				Add operator[] to std::initializer_list</td>
			<td>
				Daniil Goncharov</td>
			<td>
				2020-05-26</td>
			<td>
				2020-06</td>
			<td>
				<a href="https://wg21.link/P1990R0">P1990R0</a></td>
			<td>
				LEWG Library Evolution,LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2025R1">P2025R1</a></td>
			<td>
				Guaranteed copy elision for return variables</td>
			<td>
				Anton Zhilin</td>
			<td>
				2020-06-17</td>
			<td>
				2020-06</td>
			<td>
				<a href="https://wg21.link/P2025R0">P2025R0</a></td>
			<td>
				EWG Evolution,CWG Core</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2034R2">P2034R2</a></td>
			<td>
				Partially Mutable Lambda Captures</td>
			<td>
				Ryan McDougall</td>
			<td>
				2020-06-12</td>
			<td>
				2020-06</td>
			<td>
				<a href="https://wg21.link/P2034R1">P2034R1</a></td>
			<td>
				EWGI SG17: EWG Incubator</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2037R1">P2037R1</a></td>
			<td>
				String&#39;s gratuitous assignment</td>
			<td>
				Andrzej Krzemie&#324;ski</td>
			<td>
				2020-06-15</td>
			<td>
				2020-06</td>
			<td>
				<a href="https://wg21.link/P2037R0">P2037R0</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2093R0">P2093R0</a></td>
			<td>
				Formatted output</td>
			<td>
				Victor Zverovich</td>
			<td>
				2020-06-13</td>
			<td>
				2020-06</td>
			<td>
				&nbsp;</td>
			<td>
				SG16 Unicode,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2138R2">P2138R2</a></td>
			<td>
				Rules of Design&lt;=&gt;Wording engagement</td>
			<td>
				Ville Voutilainen</td>
			<td>
				2020-06-15</td>
			<td>
				2020-06</td>
			<td>
				<a href="https://wg21.link/P2138R1">P2138R1</a></td>
			<td>
				EWG Evolution,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2139R1">P2139R1</a></td>
			<td>
				Reviewing Deprecated Facilities of C++20 for C++23</td>
			<td>
				Alisdair Meredith</td>
			<td>
				2020-06-15</td>
			<td>
				2020-06</td>
			<td>
				<a href="https://wg21.link/P2139R0">P2139R0</a></td>
			<td>
				EWG Evolution,LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2141R0">P2141R0</a></td>
			<td>
				Aggregates are named tuples</td>
			<td>
				Antony Polukhin</td>
			<td>
				2020-05-27</td>
			<td>
				2020-06</td>
			<td>
				&nbsp;</td>
			<td>
				EWGI SG17: EWG Incubator,LEWGI SG18: LEWG Incubator,EWG Evolution,LEWG Library Evolution,LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2146R1">P2146R1</a></td>
			<td>
				Modern std::byte stream IO for C++</td>
			<td>
				Amanda Kornoushenko</td>
			<td>
				2020-06-17</td>
			<td>
				2020-06</td>
			<td>
				<a href="https://wg21.link/P2146R0">P2146R0</a></td>
			<td>
				LEWGI SG18: LEWG Incubator</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2152R0">P2152R0</a></td>
			<td>
				Querying the alignment of an object</td>
			<td>
				Inbal Levi</td>
			<td>
				2020-06-15</td>
			<td>
				2020-06</td>
			<td>
				&nbsp;</td>
			<td>
				EWGI SG17: EWG Incubator,EWG Evolution,CWG Core</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2161R1">P2161R1</a></td>
			<td>
				Remove Default Candidate Executor</td>
			<td>
				Robert Leahy</td>
			<td>
				2020-06-12</td>
			<td>
				2020-06</td>
			<td>
				<a href="https://wg21.link/P2161R0">P2161R0</a></td>
			<td>
				SG4 Networking</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2164R1">P2164R1</a></td>
			<td>
				views::enumerate</td>
			<td>
				Corentin Jabot</td>
			<td>
				2020-06-14</td>
			<td>
				2020-06</td>
			<td>
				<a href="https://wg21.link/P2164R0">P2164R0</a></td>
			<td>
				LEWG Library Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2166R0">P2166R0</a></td>
			<td>
				A Proposal to Prohibit std::basic_string and std::basic_string_view construction from nullptr</td>
			<td>
				Yuriy Chernyshov</td>
			<td>
				2020-05-19</td>
			<td>
				2020-06</td>
			<td>
				&nbsp;</td>
			<td>
				LEWGI SG18: LEWG Incubator,LEWG Library Evolution,LWG Library</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2176R0">P2176R0</a></td>
			<td>
				A different take on inexpressible conditions</td>
			<td>
				Andrzej Krzemie&#324;ski</td>
			<td>
				2020-05-27</td>
			<td>
				2020-06</td>
			<td>
				&nbsp;</td>
			<td>
				SG21 Contracts</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2178R0">P2178R0</a></td>
			<td>
				Misc lexing and string handling improvements</td>
			<td>
				Corentin Jabot</td>
			<td>
				2020-06-15</td>
			<td>
				2020-06</td>
			<td>
				&nbsp;</td>
			<td>
				SG16 Unicode,EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2179R0">P2179R0</a></td>
			<td>
				SG16: Unicode meeting summaries 2020-01-08 through 2020-05-27</td>
			<td>
				Tom Honermann</td>
			<td>
				2020-06-02</td>
			<td>
				2020-06</td>
			<td>
				&nbsp;</td>
			<td>
				SG16 Unicode</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2181R0">P2181R0</a></td>
			<td>
				Correcting the Design of Bulk Execution</td>
			<td>
				Jared Hoberock</td>
			<td>
				2020-06-14</td>
			<td>
				2020-06</td>
			<td>
				&nbsp;</td>
			<td>
				SG1 Concurrency and Parallelism</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2182R0">P2182R0</a></td>
			<td>
				Contract Support: Defining the Minimum Viable Feature Set</td>
			<td>
				Andrzej Krzemie&#324;ski</td>
			<td>
				2020-06-15</td>
			<td>
				2020-06</td>
			<td>
				&nbsp;</td>
			<td>
				SG21 Contracts</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2184R0">P2184R0</a></td>
			<td>
				Thriving in a crowded and changing world: C++ 2006-2020</td>
			<td>
				Bjarne Stroustrup</td>
			<td>
				2020-06-12</td>
			<td>
				2020-06</td>
			<td>
				&nbsp;</td>
			<td>
				All of WG21</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2185R0">P2185R0</a></td>
			<td>
				Contracts Use Case Categorization</td>
			<td>
				Caleb Sunstrum</td>
			<td>
				2020-06-14</td>
			<td>
				2020-06</td>
			<td>
				&nbsp;</td>
			<td>
				SG21 Contracts</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2187R0">P2187R0</a></td>
			<td>
				std::swap_if, std::predictable</td>
			<td>
				Nathan Myers</td>
			<td>
				2020-06-18</td>
			<td>
				2020-06</td>
			<td>
				&nbsp;</td>
			<td>
				LEWGI SG18: LEWG Incubator,Direction Group</td>
			<!--		<td></td>  -->
		</tr>
		<tr>
			<td>
				<a href="https://wg21.link/P2188R0">P2188R0</a></td>
			<td>
				Zap the Zap: Pointers should just be bags of bits</td>
			<td>
				Anthony Williams</td>
			<td>
				2020-06-15</td>
			<td>
				2020-06</td>
			<td>
				&nbsp;</td>
			<td>
				EWG Evolution</td>
			<!--		<td></td>  -->
		</tr>
	</tbody>
</table>]]></description>
      <dc:subject><![CDATA[News, Standardization,]]></dc:subject>
      <pubDate>Wed, 17 Jun 2020 22:04:12 +0000</pubDate>
      <dc:creator>Administrator</dc:creator>
    </item>

    <item>
      <title>C++20: The Unspoken Features &#45;&#45; Michele Caini</title>
      <link>https://isocpp.org//blog/2020/06/cpp20-the-unspoken-features</link>
      <guid>https://isocpp.org//blog/2020/06/cpp20-the-unspoken-features</guid>
      <description><![CDATA[<p>
	Modules, coroutines, concepts, and ranges, oh my. Here comes C++ 20. The big four new features are getting all the buzz, but what about the smaller features?&nbsp;</p>
<blockquote>
	<h3>
		<a href="https://humanreadablemag.com/issues/3/articles/cpp20-the-unspoken-features">C++20: The Unspoken Features</a></h3>
	<p>
		by Michele Caini</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		What&#39;s new in C++ besides the big four? A lot of things. We certainly won&#39;t be able to see them all in one post. Among the most interesting (at least from my point of view) are the following:</p>
	<ul>
		<li>
			Designated initializers</li>
		<li>
			Spaceship operator</li>
		<li>
			Extended range-based for statement</li>
		<li>
			Pack expansions in lambda init-capture</li>
		<li>
			Template parameter lists on lambdas</li>
		<li>
			String literals as template parameters</li>
		<li>
			consteval and constinit keywords</li>
		<li>
			Constexpr containers</li>
		<li>
			Constexpr virtual functions</li>
	</ul>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Wed, 17 Jun 2020 20:24:08 +0000</pubDate>
      <dc:creator>HumanReadableIO</dc:creator>
    </item>

    <item>
      <title>A serious take on when to choose C++ language &#45;&#45; Dawid Pilarski</title>
      <link>https://isocpp.org//blog/2020/06/a-serious-take-on-when-to-choose-cpp-language-dawid-pilarski</link>
      <guid>https://isocpp.org//blog/2020/06/a-serious-take-on-when-to-choose-cpp-language-dawid-pilarski</guid>
      <description><![CDATA[<p>
	A quick look into what is C++ and when you should consider using it in your projects.</p>
<blockquote>
	<h3>
		<a href="https://blog.panicsoftware.com/a-serious-take-on-when-to-choose-c-language/">A serious take on when to choose C++ language</a></h3>
	<p>
		by Dawid Pilarski</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Are you sure you are using C++ for the right task? Have a look at the article! Any feedback is welcome.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Wed, 17 Jun 2020 20:20:41 +0000</pubDate>
      <dc:creator>DaPi</dc:creator>
    </item>

    <item>
      <title>enable_shared_from_this &#45; overview, examples, and internals&#45;&#45;nextptr &#45;&#45; Hitesh Kumar</title>
      <link>https://isocpp.org//blog/2020/06/enable_shared_from_this-overview-examples-and-internals-nextptr</link>
      <guid>https://isocpp.org//blog/2020/06/enable_shared_from_this-overview-examples-and-internals-nextptr</guid>
      <description><![CDATA[<p>
	Usage and internals of std::enable_shared_from_this&lt;T&gt;:&nbsp;</p>
<blockquote>
	<h3>
		<a href="https://www.nextptr.com/tutorial/ta1414193955/enable_shared_from_this-overview-examples-and-internals">enable_shared_from_this - overview, examples, and internals</a></h3>
</blockquote>
<blockquote>
	<p>
		by Hitesh Kumar</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		Public inheritance from enable_shared_from_this&lt;T&gt; enables a class T to&nbsp; create additional shared_ptr instances to itself. Typically, enable_shared_from_this holds a weak_ptr to create shared_ptr on demand.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Wed, 17 Jun 2020 20:19:34 +0000</pubDate>
      <dc:creator>Hitesh Kumar</dc:creator>
    </item>

    <item>
      <title>Creating traditional Visual Studio sln from CMake</title>
      <link>https://isocpp.org//blog/2020/06/creating-traditional-visual-studio-sln-from-cmake</link>
      <guid>https://isocpp.org//blog/2020/06/creating-traditional-visual-studio-sln-from-cmake</guid>
      <description><![CDATA[<p>
	CMakeToVisualStudio parses CMake files to create a Visual Studio solution.</p>
<blockquote>
	<h3>
		<a href="https://www.nuget.org/packages/ProjectIO.CMakeToVisualStudio/3.0.0">CMakeToVisualStudio</a></h3>
	<p>
		by Zeb Mason</p>
</blockquote>
<p>
	About the release</p>
<blockquote>
	<p>
		CMakeToVisualStudio parses CMakeLists.txt and CMakeCache.txt files and creates a traditional Visual Studio solution from templated XML:</p>
	<ul>
		<li>
			Might not build properly</li>
		<li>
			Might be sufficient to work with historical tooling for Visual Studio</li>
		<li>
			LGPL v2.1 set of libraries for reading CMake and Visual Studio projects and writing Visual C++ solutions</li>
	</ul>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Product News,]]></dc:subject>
      <pubDate>Wed, 17 Jun 2020 20:17:56 +0000</pubDate>
      <dc:creator>zebedee</dc:creator>
    </item>

    <item>
      <title>C++20: The Three&#45;Way Comparison Operator&#45;&#45;Rainer Grimm</title>
      <link>https://isocpp.org//blog/2020/06/cpp20-the-three-way-comparison-operator-rainer-grimm</link>
      <guid>https://isocpp.org//blog/2020/06/cpp20-the-three-way-comparison-operator-rainer-grimm</guid>
      <description><![CDATA[<p>
	The series continue;</p>
<blockquote>
	<h3>
		<a href="http://www.modernescpp.com/index.php/c-20-the-three-way-comparison-operator">C++20: The Three-Way Comparison Operator</a></h3>
	<p>
		by Rainer Grimm</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		The three-way comparison operator &lt;=&gt; is often just called spaceship operator. The spaceship operator determines for two values A&nbsp; and B whether A &lt; B, A = B, or A &gt; B. You can define the spaceship operator or the compiler can auto-generate it for you...</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Wed, 17 Jun 2020 18:01:21 +0000</pubDate>
      <dc:creator>Adrien Hamelin</dc:creator>
    </item>

    <item>
      <title>Thriving in a crowded and changing world: C++ 2006–2020</title>
      <link>https://isocpp.org//blog/2020/06/thriving-in-a-crowded-and-changing-world-cpp-20062020</link>
      <guid>https://isocpp.org//blog/2020/06/thriving-in-a-crowded-and-changing-world-cpp-20062020</guid>
      <description><![CDATA[<p>
	On which Bjarne&nbsp;Stroustrup describes how C++ has managed to thrive despite many things</p>
<blockquote>
	<h3>
		<a href="https://dl.acm.org/doi/abs/10.1145/3386320">Thriving in a Crowded and Changing World: C++ 2006&ndash;2020</a></h3>
	<p>
		By&nbsp;Bjarne Stroustrup</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		This paper focuses on the major changes to the ISO C++ standard for the 2011, 2014, 2017, and 2020 revisions.<br />
		The standard library is about 3/4 of the C++20 standard, but this paper&rsquo;s primary focus is on language features<br />
		and the programming techniques they support.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Wed, 17 Jun 2020 14:26:08 +0000</pubDate>
      <dc:creator>Jordi Mon Companys</dc:creator>
    </item>

    <item>
      <title>QStringView diaries: zero&#45;allocation string splitting &#45;&#45; Marc Mutz</title>
      <link>https://isocpp.org//blog/2020/06/qstringview-diaries-zero-allocation-string-splitting-marc-mutz</link>
      <guid>https://isocpp.org//blog/2020/06/qstringview-diaries-zero-allocation-string-splitting-marc-mutz</guid>
      <description><![CDATA[<p>
	QStringTokenizer merged for Qt 6.0</p>
<blockquote>
	<h3>
		<a href="https://www.kdab.com/qstringview-diaries-zero-allocation-string-splitting/">QStringView Diaries: Zero-Allocation String Splitting</a></h3>
	<p>
		by Marc Mutz</p>
</blockquote>
<p>
	From the article:</p>
<blockquote>
	<p>
		I am happy to announce that the first QStringTokenizer commits have landed in what will eventually become Qt 6.0.</p>
	<p>
		QStringTokenizer splits strings, with zero memory allocations, universally, and safely.</p>
	<p>
		While the version in Qt will be Qt 6-only, KDAB will release this tool for Qt 5 as part of its KDToolBox productivity suite.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Mon, 15 Jun 2020 18:44:19 +0000</pubDate>
      <dc:creator>Marc Mutz</dc:creator>
    </item>

    <item>
      <title>The C and C++ Club : A technical blog</title>
      <link>https://isocpp.org//blog/2020/06/The-C-and-C-Club-https-thecandcppclub.com1</link>
      <guid>https://isocpp.org//blog/2020/06/The-C-and-C-Club-https-thecandcppclub.com1</guid>
      <description><![CDATA[<p>
	Deepesh has started a club about C and C++.</p>
<blockquote>
	<h3>
		<a href="https://thecandcppclub.com">The C and C++ Club</a></h3>
	<p>
		by Deepesh Menon P M</p>
</blockquote>
<p>
	About the club:</p>
<blockquote>
	<p>
		He has started a technical blog on C and C++, covering various philosophical aspects of these languages. Do visit and share your comments. 5 parts and 22 chapters are there on C, C++, design patterns and data structures. Please support me on this venture.</p>
</blockquote>]]></description>
      <dc:subject><![CDATA[News, Articles & Books,]]></dc:subject>
      <pubDate>Mon, 15 Jun 2020 18:44:00 +0000</pubDate>
      <dc:creator>Deepesh Menon</dc:creator>
    </item>

    
    </channel>
</rss>